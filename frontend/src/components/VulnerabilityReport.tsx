import { Shield, AlertTriangle, CheckCircle, TrendingUp } from "lucide-react";

interface Vulnerability {
  name: string;
  cause: string;
  type: "low" | "medium" | "high" | "critical";
}

interface SeverityBreakdown {
  severity: string;
  count: number;
  weight: number;
}

interface VulnerabilityReportData {
  riskLevel: string;
  totalVulnerabilities: number;
  riskScore: number;
  maxScore: number;
  severityBreakdown: SeverityBreakdown[];
  vulnerabilities: Vulnerability[];
  mermaidChart?: string;
}

interface VulnerabilityReportProps {
  data: VulnerabilityReportData;
}

function VulnerabilityReport({ data }: VulnerabilityReportProps) {
  const getRiskColor = (level: string) => {
    switch (level.toLowerCase()) {
      case "low":
        return "text-accent-mint";
      case "medium":
        return "text-accent-amber";
      case "high":
        return "text-accent-red";
      case "critical":
        return "text-accent-red";
      default:
        return "text-text-muted";
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return "bg-accent-red/20 text-accent-red border-accent-red/30";
      case "high":
        return "bg-accent-red/20 text-accent-red border-accent-red/30";
      case "medium":
        return "bg-accent-amber/20 text-accent-amber border-accent-amber/30";
      case "low":
        return "bg-accent-mint/20 text-accent-mint border-accent-mint/30";
      default:
        return "bg-stroke/20 text-text-muted border-stroke/30";
    }
  };

  const getScoreColor = (score: number, maxScore: number) => {
    const percentage = (score / maxScore) * 100;
    if (percentage <= 20) return "text-accent-mint";
    if (percentage <= 50) return "text-accent-amber";
    return "text-accent-red";
  };

  return (
    <div className="space-y-6">
      {/* Risk Overview */}
      <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
        <div className="rounded-card border border-stroke bg-bg-elev p-6">
          <div className="mb-4 flex items-center space-x-3">
            <Shield className={`h-6 w-6 ${getRiskColor(data.riskLevel)}`} />
            <h3 className="font-heading text-lg font-semibold text-text-primary">
              Risk Level
            </h3>
          </div>
          <p className={`text-3xl font-bold ${getRiskColor(data.riskLevel)}`}>
            {data.riskLevel}
          </p>
        </div>

        <div className="rounded-card border border-stroke bg-bg-elev p-6">
          <div className="mb-4 flex items-center space-x-3">
            <AlertTriangle className="h-6 w-6 text-accent-amber" />
            <h3 className="font-heading text-lg font-semibold text-text-primary">
              Total Vulnerabilities
            </h3>
          </div>
          <p className="text-3xl font-bold text-text-primary">
            {data.totalVulnerabilities}
          </p>
        </div>

        <div className="rounded-card border border-stroke bg-bg-elev p-6">
          <div className="mb-4 flex items-center space-x-3">
            <TrendingUp
              className={`h-6 w-6 ${getScoreColor(data.riskScore, data.maxScore)}`}
            />
            <h3 className="font-heading text-lg font-semibold text-text-primary">
              Risk Score
            </h3>
          </div>
          <p
            className={`text-3xl font-bold ${getScoreColor(data.riskScore, data.maxScore)}`}
          >
            {data.riskScore}/{data.maxScore}
          </p>
        </div>
      </div>

      {/* Severity Breakdown */}
      <div className="rounded-card border border-stroke bg-bg-elev p-6">
        <h3 className="mb-6 font-heading text-lg font-semibold text-text-primary">
          Severity Breakdown
        </h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="border-b border-stroke">
              <tr>
                <th className="px-4 py-3 text-left text-sm font-medium text-text-muted">
                  Severity
                </th>
                <th className="px-4 py-3 text-left text-sm font-medium text-text-muted">
                  Count
                </th>
                <th className="px-4 py-3 text-left text-sm font-medium text-text-muted">
                  Weight
                </th>
              </tr>
            </thead>
            <tbody>
              {data.severityBreakdown.map((item) => (
                <tr key={item.severity} className="bg-bg-elev">
                  <td className="px-4 py-3">
                    <span
                      className={`inline-flex rounded-chip px-3 py-1 text-xs font-medium ${getSeverityColor(item.severity)}`}
                    >
                      {item.severity}
                    </span>
                  </td>
                  <td className="px-4 py-3 font-mono text-sm text-text-primary">
                    {item.count}
                  </td>
                  <td className="px-4 py-3 font-mono text-sm text-text-primary">
                    {item.weight}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Vulnerability Details */}
      <div className="rounded-card border border-stroke bg-bg-elev p-6">
        <h3 className="mb-6 font-heading text-lg font-semibold text-text-primary">
          Vulnerability Details
        </h3>
        <div className="space-y-4">
          {data.vulnerabilities.map((vuln) => (
            <div
              key={vuln.name}
              className="rounded-input border border-stroke bg-bg-base p-4"
            >
              <div className="mb-3 flex items-start justify-between">
                <h4 className="font-semibold text-text-primary">{vuln.name}</h4>
                <span
                  className={`inline-flex rounded-chip px-3 py-1 text-xs font-medium ${getSeverityColor(vuln.type)}`}
                >
                  {vuln.type.toUpperCase()}
                </span>
              </div>
              <p className="text-sm text-text-muted">{vuln.cause}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Mermaid Chart Placeholder */}
      {data.mermaidChart && (
        <div className="rounded-card border border-stroke bg-bg-elev p-6">
          <h3 className="mb-6 font-heading text-lg font-semibold text-text-primary">
            Distribution Chart
          </h3>
          <div className="rounded-input border border-stroke bg-bg-base p-4">
            <pre className="whitespace-pre-wrap text-xs text-text-muted">
              {data.mermaidChart}
            </pre>
          </div>
        </div>
      )}
    </div>
  );
}

export default VulnerabilityReport;
